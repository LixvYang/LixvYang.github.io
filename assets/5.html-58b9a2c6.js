import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as p,c as o,f as l,b as n,d as c,a as i,e as s}from"./app-aad57b74.js";const u={},r=n("p",null,"GRPC-Gateway是protoc的一个插件，类似protoc-gen-go和protoc-gen-go-grpc插件，前者是生成.pb.go后者是生成.grpc.pb.go文件。",-1),d=s(`<h1 id="grpc教程-4-grpc-gateway教程与transcoding" tabindex="-1"><a class="header-anchor" href="#grpc教程-4-grpc-gateway教程与transcoding" aria-hidden="true">#</a> GRPC教程 4 - GRPC-Gateway教程与Transcoding</h1><p>这两个插件是帮助proto文件生成go语言的插件，那么GRPC-Gateway呢，它是一个可以根据proto文件的定义生成一个反向代理器的，服务器可以将 RESTful JSON API 转换为 GRPC。</p><p>这里你会有三个疑惑？什么是反向代理器？为什么要根据proto文件生成反向代理器？为什么要将RESTful JSON API转换成GRPC？</p><p>其实这一个图就可以解释<br><img src="https://ts1.cn.mm.bing.net/th/id/R-C.37541e0178c028842f13f773275f5cb3?rik=rZAPx2ssc92Fpg&amp;pid=ImgRaw&amp;r=0" alt="" loading="lazy"></p><h2 id="基本示例" tabindex="-1"><a class="header-anchor" href="#基本示例" aria-hidden="true">#</a> 基本示例</h2><p>我们继续使用我们一开始的hello.proto文件来做示例</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>├── client
│   ├── go.mod
│   ├── main.go
│   └── pb
│       ├── hello_grpc.pb.go
│       ├── hello.pb.go
│       └── hello.proto
├── go.work
└── server
    ├── go.mod
    ├── go.sum
    ├── main.go
    └── pb
        ├── hello_grpc.pb.go
        ├── hello.pb.go
        └── hello.proto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这次我们发现我没每次调用server进程下的服务，每次都需要重新定义一个客户端再去调用，那能不能说，就是像gin这种框架一样，使用简单的JSON body请求就可以请求GRPC呢，这就是grpc gateway的作用了，我们来演示一下怎么来用grpc-gateway。</p><p>首先添加 gRPC-Gateway 注释，这些注释定义了我们GRPC服务如何映射为JSON的请求和响应。使用protobuf的时候，GRPC service必须用google.api.HTTP来定义。</p><p>这里我用POST /v1/hello 来 映射到 Hello 的GRPC服务。</p><p>修改后的service Greeter是这样</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;google/api/annotations.proto&quot;</span><span class="token punctuation">;</span>

service Greetering <span class="token punctuation">{</span>
  rpc Hello <span class="token punctuation">(</span>HelloReq<span class="token punctuation">)</span> returns <span class="token punctuation">(</span>HelloResp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    option <span class="token punctuation">(</span>google<span class="token punctuation">.</span>api<span class="token punctuation">.</span>http<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
      post<span class="token punctuation">:</span> <span class="token string">&quot;/api/v1/hello&quot;</span>
      body<span class="token punctuation">:</span> <span class="token string">&quot;*&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里 google/api/annotations.proto 却是在go/include/下，也就是我们下载proto时，解压下来的文件夹。和include 同一目录。所以我们需要去跟github上去下载。</p>`,13),k={href:"https://github.com/googleapis/googleapis/tree/master/google/api",target:"_blank",rel:"noopener noreferrer"},v=s(`<p>随后需要重新加上grpc-gateway插件器创建对应的pb.gw.go文件。</p><p>在这里你需要下载grpc-gateway</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> install github<span class="token punctuation">.</span>com<span class="token operator">/</span>grpc<span class="token operator">-</span>ecosystem<span class="token operator">/</span>grpc<span class="token operator">-</span>gateway<span class="token operator">/</span>v2<span class="token operator">/</span>protoc<span class="token operator">-</span>gen<span class="token operator">-</span>grpc<span class="token operator">-</span>gateway@v2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>protoc <span class="token operator">--</span>go_out<span class="token operator">=</span><span class="token punctuation">.</span> <span class="token operator">--</span>go_opt<span class="token operator">=</span>paths<span class="token operator">=</span>source_relative <span class="token operator">--</span><span class="token keyword">go</span><span class="token operator">-</span>grpc_out<span class="token operator">=</span><span class="token punctuation">.</span> <span class="token operator">--</span><span class="token keyword">go</span><span class="token operator">-</span>grpc_opt<span class="token operator">=</span>paths<span class="token operator">=</span>source_relative <span class="token operator">--</span>grpc<span class="token operator">-</span>gateway_out<span class="token operator">=</span><span class="token punctuation">.</span> <span class="token operator">--</span>grpc<span class="token operator">-</span>gateway_opt<span class="token operator">=</span>paths<span class="token operator">=</span>source_relative pb<span class="token operator">/</span>hello<span class="token punctuation">.</span>proto 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在我们开始编写main.go，我们加入gateway的方式就是新起一个goroutine 去开启gateway代理</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

		conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">DialContext</span><span class="token punctuation">(</span>
			context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token string">&quot;0.0.0.0:7890&quot;</span><span class="token punctuation">,</span>
			grpc<span class="token punctuation">.</span><span class="token function">WithBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			grpc<span class="token punctuation">.</span><span class="token function">WithTransportCredentials</span><span class="token punctuation">(</span>insecure<span class="token punctuation">.</span><span class="token function">NewCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to dial server:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>

		gwmux <span class="token operator">:=</span> runtime<span class="token punctuation">.</span><span class="token function">NewServeMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		err <span class="token operator">=</span> pb<span class="token punctuation">.</span><span class="token function">RegisterGreeteringHandler</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gwmux<span class="token punctuation">,</span> conn<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to register gateway:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>

		gwServer <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Server<span class="token punctuation">{</span>
			Addr<span class="token punctuation">:</span>    <span class="token string">&quot;:8090&quot;</span><span class="token punctuation">,</span>
			Handler<span class="token punctuation">:</span> gwmux<span class="token punctuation">,</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 8090端口提供gRPC-Gateway服务</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Serving gRPC-Gateway on http://0.0.0.0:8090&quot;</span><span class="token punctuation">)</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span>gwServer<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们用curl脚本命令，或者电脑上可以下载下postman去测试一下。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST http://127.0.0.1:8090/api/v1/hello <span class="token string">&#39;{&quot;name&quot;: &quot;Lixin&quot;}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="transcoding" tabindex="-1"><a class="header-anchor" href="#transcoding" aria-hidden="true">#</a> Transcoding</h2><p>下面接着来讲一下更多的匹配规则，在上个例子中，我们并没有讲解更多的路径匹配，比如<code>/api/:name</code>或者传递query参数，我们来讲解一下这样的方式</p><p>首先我们先修改一下对应之前的pb/hello.proto</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>message HelloReq <span class="token punctuation">{</span>
  <span class="token builtin">string</span> name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token builtin">int64</span> age <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token builtin">string</span> msg <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

message HelloResp <span class="token punctuation">{</span>
  <span class="token builtin">string</span> msg <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

service Greetering <span class="token punctuation">{</span>
  rpc Hello <span class="token punctuation">(</span>HelloReq<span class="token punctuation">)</span> returns <span class="token punctuation">(</span>HelloResp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    option <span class="token punctuation">(</span>google<span class="token punctuation">.</span>api<span class="token punctuation">.</span>http<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
      get<span class="token punctuation">:</span> <span class="token string">&quot;/api/v1/hello/{name}&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>来方便我们进行查看如何去使用http transcoding 规则查询。</p><p>我们再次进行编码 <code>protoc ...</code>, 运行服务</p><p>接着启动服务，用curl去测试一下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>curl <span class="token operator">--</span>location &#39;http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">8090</span><span class="token operator">/</span>api<span class="token operator">/</span>v1<span class="token operator">/</span>hello<span class="token operator">/</span>lixin&#39;

<span class="token punctuation">{</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;0 / lixin /  Hello&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到获取到了对应的name字段，那如果我们传入query参数呢？</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>curl <span class="token operator">--</span>location &#39;http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">8090</span><span class="token operator">/</span>api<span class="token operator">/</span>v1<span class="token operator">/</span>hello<span class="token operator">/</span>lixin?age<span class="token operator">=</span><span class="token number">12</span>&#39;

<span class="token punctuation">{</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;12 / lixin /  Hello&quot;</span><span class="token punctuation">}</span>

curl <span class="token operator">--</span>location &#39;http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">8090</span><span class="token operator">/</span>api<span class="token operator">/</span>v1<span class="token operator">/</span>hello<span class="token operator">/</span>lixin?age<span class="token operator">=</span><span class="token number">12</span><span class="token operator">&amp;</span>msg<span class="token operator">=</span>message&#39;
<span class="token punctuation">{</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;12 / lixin / message Hello&quot;</span><span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，我们这样就可以给http 路由传递 query参数去访问对应的grpc服务。</p><p>那还有没有别的用法？,我们继续修改proto文件 <code>get: &quot;/api/v1/hello/{name=names/*}&quot;</code>, 接着我们传递</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>curl <span class="token operator">--</span>location &#39;http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">8090</span><span class="token operator">/</span>api<span class="token operator">/</span>v1<span class="token operator">/</span>hello<span class="token operator">/</span>names<span class="token operator">/</span>lixin?age<span class="token operator">=</span><span class="token number">12</span><span class="token operator">&amp;</span>msg<span class="token operator">=</span>message&#39;

<span class="token punctuation">{</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;12 / names/lixin / message Hello&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到我们修改了对应的:name为{names/*}，这样我们就让<code>names/lixin</code>顺利传递给了name参数。</p><p>接下来，我们看看body的用法，我们一般不会用get方法去传递body，所以下面我们接着再来修改一下proto文件，让对应的http 方法称为post，然后加上body参数。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>service Greetering <span class="token punctuation">{</span>
  rpc Hello <span class="token punctuation">(</span>HelloReq<span class="token punctuation">)</span> returns <span class="token punctuation">(</span>HelloResp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    option <span class="token punctuation">(</span>google<span class="token punctuation">.</span>api<span class="token punctuation">.</span>http<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
      post<span class="token punctuation">:</span> <span class="token string">&quot;/api/v1/hello/{name}&quot;</span>
      body<span class="token punctuation">:</span> <span class="token string">&quot;msg&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们再来观察一下这个option里面的东西，post路径为<code>/api/v1/hello/{name}</code>, 这意味着，我们可以给path传递name，然后给body传递msg参数，那剩下的age呢？我们可以用query路径传递进去，就是这样</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>message HelloReq <span class="token punctuation">{</span>
  <span class="token builtin">string</span> name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// path </span>
  <span class="token builtin">int64</span> age <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// query  </span>
  <span class="token builtin">string</span> msg <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// body</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>curl <span class="token operator">--</span>location &#39;http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">8090</span><span class="token operator">/</span>api<span class="token operator">/</span>v1<span class="token operator">/</span>hello<span class="token operator">/</span>lixin?age<span class="token operator">=</span><span class="token number">12</span>&#39; \\
<span class="token operator">--</span>header &#39;Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> text<span class="token operator">/</span>plain&#39; \\
<span class="token operator">--</span>data <span class="token char">&#39;&quot;eeeesae&quot;&#39;</span>

<span class="token punctuation">{</span> <span class="token string">&quot;msg&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;12 / lixin / eeeesae Hello&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到我们传递的data，就是对应到msg参数里面的。</p><p>下面我们再修改一下proto文件, 将body修改为*</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>service Greetering <span class="token punctuation">{</span>
  rpc Hello <span class="token punctuation">(</span>HelloReq<span class="token punctuation">)</span> returns <span class="token punctuation">(</span>HelloResp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    option <span class="token punctuation">(</span>google<span class="token punctuation">.</span>api<span class="token punctuation">.</span>http<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
      post<span class="token punctuation">:</span> <span class="token string">&quot;/api/v1/hello/{name}&quot;</span>
      body<span class="token punctuation">:</span> <span class="token string">&quot;*&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重新生成gw.go <code>protoc ...</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>curl <span class="token operator">--</span>location &#39;http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">8090</span><span class="token operator">/</span>api<span class="token operator">/</span>v1<span class="token operator">/</span>hello<span class="token operator">/</span>lixin?age<span class="token operator">=</span><span class="token number">12</span>&#39; \\
<span class="token operator">--</span>header &#39;Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>json&#39; \\
<span class="token operator">--</span>data &#39;<span class="token punctuation">{</span>
    <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Lixinsss&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">,</span>
    <span class="token string">&quot;msg&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;This is a message.&quot;</span>
<span class="token punctuation">}</span>&#39;

可以看到，虽然body是<span class="token operator">*</span><span class="token punctuation">,</span> 但是body里面只有传递age和msg有效，当body是<span class="token operator">*</span>时，query参数就没有效果了。
<span class="token punctuation">{</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;21 / lixin / This is a message. Hello&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>我们本篇文章，主要是介绍了GRPC-Gateway,下载gatwway插件，学习使用gateway,并且学习了传递HTTP的多种方式</p>`,34);function g(m,b){const a=t("ExternalLinkIcon");return p(),o("div",null,[r,l(" more "),d,n("p",null,[n("a",k,[c("https://github.com/googleapis/googleapis/tree/master/google/api"),i(a)])]),v])}const y=e(u,[["render",g],["__file","5.html.vue"]]);export{y as default};
