const t=JSON.parse('{"key":"v-964b6834","path":"/posts/program/golang/design-patterns/structural/Adapter.html","title":"适配器模式","lang":"zh-CN","frontmatter":{"icon":"carbon:character-patterns","date":"2023-10-16T00:00:00.000Z","isOriginal":true,"category":["tutorial"],"tag":["golang","design-patterns"],"description":"适配器模式 适配器是一种结构型设计模式，它能使不兼容的接口匹配和工作。 例如我们知道美国、欧洲、中国的充电器接口和插座电源标准都不太一样，这时候如果我们去欧洲，那么我们可以通过一个适配器转换将我们在中国的插口转换为在欧洲电源上的充电。 简单来说，适配器可以充当两个对象之间的中间封装层，用于接受一个对象的调用将其转换为另一个接口对象可以识别的接口。 用处 当我们希望使用一个类时，但其接口与其他代码不兼容，我们这时候就可以使用适配器来解决:适配器允许我们创建一个中间层类，可以作为代码与遗留类、第三方类提供接口的转换器。","head":[["meta",{"property":"og:url","content":"https://yanglixin.com/posts/program/golang/design-patterns/structural/Adapter.html"}],["meta",{"property":"og:title","content":"适配器模式"}],["meta",{"property":"og:description","content":"适配器模式 适配器是一种结构型设计模式，它能使不兼容的接口匹配和工作。 例如我们知道美国、欧洲、中国的充电器接口和插座电源标准都不太一样，这时候如果我们去欧洲，那么我们可以通过一个适配器转换将我们在中国的插口转换为在欧洲电源上的充电。 简单来说，适配器可以充当两个对象之间的中间封装层，用于接受一个对象的调用将其转换为另一个接口对象可以识别的接口。 用处 当我们希望使用一个类时，但其接口与其他代码不兼容，我们这时候就可以使用适配器来解决:适配器允许我们创建一个中间层类，可以作为代码与遗留类、第三方类提供接口的转换器。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-19T00:41:13.000Z"}],["meta",{"property":"article:author","content":"离心"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:tag","content":"design-patterns"}],["meta",{"property":"article:published_time","content":"2023-10-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-19T00:41:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"适配器模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-16T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-19T00:41:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"离心\\"}]}"]]},"headers":[{"level":2,"title":"用处","slug":"用处","link":"#用处","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1697467249000,"updatedTime":1697676073000,"contributors":[{"name":"lixin","email":"lixin@lixins-MacBook-Pro.local","commits":2}]},"readingTime":{"minutes":2.5,"words":751},"filePathRelative":"posts/program/golang/design-patterns/structural/Adapter.md","localizedDate":"2023年10月16日","excerpt":"<h1> 适配器模式</h1>\\n<p>适配器是一种结构型设计模式，它能使不兼容的接口匹配和工作。</p>\\n<p>例如我们知道美国、欧洲、中国的充电器接口和插座电源标准都不太一样，这时候如果我们去欧洲，那么我们可以通过一个适配器转换将我们在中国的插口转换为在欧洲电源上的充电。</p>\\n<p>简单来说，适配器可以充当两个对象之间的中间封装层，用于接受一个对象的调用将其转换为另一个接口对象可以识别的接口。</p>\\n<h2> 用处</h2>\\n<p>当我们希望使用一个类时，但其接口与其他代码不兼容，我们这时候就可以使用适配器来解决:适配器允许我们创建一个中间层类，可以作为代码与遗留类、第三方类提供接口的转换器。</p>","autoDesc":true}');export{t as data};
