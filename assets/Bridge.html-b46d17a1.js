const t=JSON.parse('{"key":"v-130a3318","path":"/posts/program/golang/design-patterns/structural/Bridge.html","title":"桥接模式","lang":"zh-CN","frontmatter":{"icon":"carbon:character-patterns","date":"2023-10-17T00:00:00.000Z","isOriginal":true,"category":["tutorial"],"tag":["golang","design-patterns"],"description":"桥接模式 桥接模式是一种结构型设计模式,它能将抽象部分与实现部分分离开来,使得两者可以独立变化。桥接模式建立一个桥接结构去搭起抽象部分和实现部分,从而可以保持各部分的独立性和优势。 桥接模式的主要作用是: 桥接模式能将抽象部分和实现部分分离,它们可以独立地变化。 消除永久绑定关系,提高系统的可扩展性,客户端不需要重新编译代码就可以扩展新的实现类。 桥接模式提高了抽象和实现的独立性,有利于系统的分层设计。 桥接模式符合开闭原则,在抽象和实现中任意一方改变,都不影响另一方。 实现","head":[["meta",{"property":"og:url","content":"https://yanglixin.com/posts/program/golang/design-patterns/structural/Bridge.html"}],["meta",{"property":"og:title","content":"桥接模式"}],["meta",{"property":"og:description","content":"桥接模式 桥接模式是一种结构型设计模式,它能将抽象部分与实现部分分离开来,使得两者可以独立变化。桥接模式建立一个桥接结构去搭起抽象部分和实现部分,从而可以保持各部分的独立性和优势。 桥接模式的主要作用是: 桥接模式能将抽象部分和实现部分分离,它们可以独立地变化。 消除永久绑定关系,提高系统的可扩展性,客户端不需要重新编译代码就可以扩展新的实现类。 桥接模式提高了抽象和实现的独立性,有利于系统的分层设计。 桥接模式符合开闭原则,在抽象和实现中任意一方改变,都不影响另一方。 实现"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-19T00:41:13.000Z"}],["meta",{"property":"article:author","content":"离心"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:tag","content":"design-patterns"}],["meta",{"property":"article:published_time","content":"2023-10-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-19T00:41:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"桥接模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-17T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-19T00:41:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"离心\\"}]}"]]},"headers":[{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1697676073000,"updatedTime":1697676073000,"contributors":[{"name":"lixin","email":"lixin@lixins-MacBook-Pro.local","commits":1}]},"readingTime":{"minutes":2.04,"words":612},"filePathRelative":"posts/program/golang/design-patterns/structural/Bridge.md","localizedDate":"2023年10月17日","excerpt":"<h1> 桥接模式</h1>\\n<p>桥接模式是一种结构型设计模式,它能将抽象部分与实现部分分离开来,使得两者可以独立变化。桥接模式建立一个桥接结构去搭起抽象部分和实现部分,从而可以保持各部分的独立性和优势。</p>\\n<p>桥接模式的主要作用是:</p>\\n<p>桥接模式能将抽象部分和实现部分分离,它们可以独立地变化。</p>\\n<p>消除永久绑定关系,提高系统的可扩展性,客户端不需要重新编译代码就可以扩展新的实现类。</p>\\n<p>桥接模式提高了抽象和实现的独立性,有利于系统的分层设计。</p>\\n<p>桥接模式符合开闭原则,在抽象和实现中任意一方改变,都不影响另一方。</p>\\n<h2> 实现</h2>","autoDesc":true}');export{t as data};
