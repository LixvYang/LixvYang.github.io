const e=JSON.parse('{"key":"v-0aee9c0c","path":"/posts/program/golang/design-patterns/behavioral/Builder.html","title":"建造者模式","lang":"zh-CN","frontmatter":{"icon":"carbon:character-patterns","date":"2023-10-11T00:00:00.000Z","isOriginal":true,"category":["tutorial"],"tag":["golang","design-patterns"],"description":"建造者模式是一种创建型设计模式,它可以将一个复杂对象的构建与它的表示分离,使得同样的构建过程可以创建不同的表示。","head":[["meta",{"property":"og:url","content":"https://yanglixin.com/posts/program/golang/design-patterns/behavioral/Builder.html"}],["meta",{"property":"og:title","content":"建造者模式"}],["meta",{"property":"og:description","content":"建造者模式是一种创建型设计模式,它可以将一个复杂对象的构建与它的表示分离,使得同样的构建过程可以创建不同的表示。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-19T02:11:59.000Z"}],["meta",{"property":"article:author","content":"离心"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:tag","content":"design-patterns"}],["meta",{"property":"article:published_time","content":"2023-10-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-19T02:11:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"建造者模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-11T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-19T02:11:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"离心\\"}]}"]]},"headers":[{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":2,"title":"用处","slug":"用处","link":"#用处","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]},{"level":2,"title":"另一种实现","slug":"另一种实现","link":"#另一种实现","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1697041289000,"updatedTime":1697681519000,"contributors":[{"name":"lixin","email":"lixin@lixins-MacBook-Pro.local","commits":2}]},"readingTime":{"minutes":2.97,"words":892},"filePathRelative":"posts/program/golang/design-patterns/behavioral/Builder.md","localizedDate":"2023年10月11日","excerpt":"<p>建造者模式是一种创建型设计模式,它可以将一个复杂对象的构建与它的表示分离,使得同样的构建过程可以创建不同的表示。</p>\\n","autoDesc":true}');export{e as data};
