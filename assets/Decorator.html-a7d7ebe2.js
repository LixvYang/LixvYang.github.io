const t=JSON.parse('{"key":"v-07d89b7a","path":"/posts/program/golang/design-patterns/structural/Decorator.html","title":"装饰模式","lang":"zh-CN","frontmatter":{"icon":"carbon:character-patterns","date":"2023-10-18T00:00:00.000Z","isOriginal":true,"category":["tutorial"],"tag":["golang","design-patterns"],"description":"装饰器模式(Decorator)是一种结构型设计模式,允许向一个现有的对象添加新的功能,同时又不改变其结构。这种类型的设计模式属于结构型模式,它创建了一个装饰类,用来包装原有的类,并在保持类方法完整性的前提下,提供了额外的功能。","head":[["meta",{"property":"og:url","content":"https://yanglixin.com/posts/program/golang/design-patterns/structural/Decorator.html"}],["meta",{"property":"og:title","content":"装饰模式"}],["meta",{"property":"og:description","content":"装饰器模式(Decorator)是一种结构型设计模式,允许向一个现有的对象添加新的功能,同时又不改变其结构。这种类型的设计模式属于结构型模式,它创建了一个装饰类,用来包装原有的类,并在保持类方法完整性的前提下,提供了额外的功能。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-19T02:11:59.000Z"}],["meta",{"property":"article:author","content":"离心"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:tag","content":"design-patterns"}],["meta",{"property":"article:published_time","content":"2023-10-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-19T02:11:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"装饰模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-18T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-19T02:11:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"离心\\"}]}"]]},"headers":[{"level":2,"title":"用法","slug":"用法","link":"#用法","children":[]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1697676073000,"updatedTime":1697681519000,"contributors":[{"name":"lixin","email":"lixin@lixins-MacBook-Pro.local","commits":2}]},"readingTime":{"minutes":1.15,"words":344},"filePathRelative":"posts/program/golang/design-patterns/structural/Decorator.md","localizedDate":"2023年10月18日","excerpt":"<p>装饰器模式(Decorator)是一种结构型设计模式,允许向一个现有的对象添加新的功能,同时又不改变其结构。这种类型的设计模式属于结构型模式,它创建了一个装饰类,用来包装原有的类,并在保持类方法完整性的前提下,提供了额外的功能。</p>\\n","autoDesc":true}');export{t as data};
