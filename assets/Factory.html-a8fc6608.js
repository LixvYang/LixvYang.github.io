const t=JSON.parse('{"key":"v-dba8042a","path":"/posts/program/golang/design-patterns/behavioral/Factory.html","title":"工厂模式","lang":"zh-CN","frontmatter":{"icon":"carbon:character-patterns","date":"2023-10-10T00:00:00.000Z","isOriginal":true,"category":["tutorial"],"tag":["golang","design-patterns"],"description":"工厂模式是面向对象编程语言中常用的设计模式，用于抽象对象创建过程。 代码不直接实例化对象，而是向工厂对象请求实例，工厂对象负责返回完全初始化的对象。 工厂模式 定义 工厂模式定义了创建对象的接口，但让子类决定实例化哪个类。这种模式包括一个创建类，它知道要实例化哪些具体类。客户端代码调用工厂对象，而不是直接通过构造函数创建对象。 工厂方法返回一个通用产品。它为在超类中创建对象提供了一个接口，但允许子类改变将要创建对象的类型。 用处 使用工厂模式有几个主要好处： 减少了复杂的对象创建代码，并通过将创建逻辑集中在一处来消除重复。 减少对具体类型的依赖，促进松散耦合。客户端代码只需了解工厂接口，而无需关心对象是如何创建的。 它遵循单一责任原则，将对象创建代码与其他业务逻辑分开。 测试代码变得更容易，因为在测试过程中可以对具体类型进行模拟或存根测试，而无需更改客户端代码。","head":[["meta",{"property":"og:url","content":"https://yanglixin.com/posts/program/golang/design-patterns/behavioral/Factory.html"}],["meta",{"property":"og:title","content":"工厂模式"}],["meta",{"property":"og:description","content":"工厂模式是面向对象编程语言中常用的设计模式，用于抽象对象创建过程。 代码不直接实例化对象，而是向工厂对象请求实例，工厂对象负责返回完全初始化的对象。 工厂模式 定义 工厂模式定义了创建对象的接口，但让子类决定实例化哪个类。这种模式包括一个创建类，它知道要实例化哪些具体类。客户端代码调用工厂对象，而不是直接通过构造函数创建对象。 工厂方法返回一个通用产品。它为在超类中创建对象提供了一个接口，但允许子类改变将要创建对象的类型。 用处 使用工厂模式有几个主要好处： 减少了复杂的对象创建代码，并通过将创建逻辑集中在一处来消除重复。 减少对具体类型的依赖，促进松散耦合。客户端代码只需了解工厂接口，而无需关心对象是如何创建的。 它遵循单一责任原则，将对象创建代码与其他业务逻辑分开。 测试代码变得更容易，因为在测试过程中可以对具体类型进行模拟或存根测试，而无需更改客户端代码。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-11T02:07:19.000Z"}],["meta",{"property":"article:author","content":"离心"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:tag","content":"design-patterns"}],["meta",{"property":"article:published_time","content":"2023-10-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-11T02:07:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"工厂模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-10T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-11T02:07:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"离心\\"}]}"]]},"headers":[{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":2,"title":"用处","slug":"用处","link":"#用处","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[{"level":3,"title":"简单工厂","slug":"简单工厂","link":"#简单工厂","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1696990039000,"updatedTime":1696990039000,"contributors":[{"name":"lixin","email":"lixin@lixins-MacBook-Pro.local","commits":1}]},"readingTime":{"minutes":2.26,"words":677},"filePathRelative":"posts/program/golang/design-patterns/behavioral/Factory.md","localizedDate":"2023年10月10日","excerpt":"<p>工厂模式是面向对象编程语言中常用的设计模式，用于抽象对象创建过程。</p>\\n<p>代码不直接实例化对象，而是向工厂对象请求实例，工厂对象负责返回完全初始化的对象。</p>\\n<h1> 工厂模式</h1>\\n<h2> 定义</h2>\\n<p>工厂模式定义了创建对象的接口，但让子类决定实例化哪个类。这种模式包括一个创建类，它知道要实例化哪些具体类。客户端代码调用工厂对象，而不是直接通过构造函数创建对象。</p>\\n<p>工厂方法返回一个通用产品。它为在超类中创建对象提供了一个接口，但允许子类改变将要创建对象的类型。</p>\\n<h2> 用处</h2>\\n<p>使用工厂模式有几个主要好处：</p>\\n<ul>\\n<li>减少了复杂的对象创建代码，并通过将创建逻辑集中在一处来消除重复。</li>\\n<li>减少对具体类型的依赖，促进松散耦合。客户端代码只需了解工厂接口，而无需关心对象是如何创建的。</li>\\n<li>它遵循单一责任原则，将对象创建代码与其他业务逻辑分开。</li>\\n<li>测试代码变得更容易，因为在测试过程中可以对具体类型进行模拟或存根测试，而无需更改客户端代码。</li>\\n</ul>","autoDesc":true}');export{t as data};
