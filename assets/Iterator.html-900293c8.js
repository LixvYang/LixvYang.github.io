const t=JSON.parse('{"key":"v-661b70cf","path":"/posts/program/golang/design-patterns/behavioral/Iterator.html","title":"迭代器模式","lang":"zh-CN","frontmatter":{"icon":"carbon:character-patterns","date":"2023-10-23T00:00:00.000Z","isOriginal":true,"category":["tutorial"],"tag":["golang","design-patterns"],"description":"迭代器模式（Iterator Pattern）是一种行为型设计模式，它提供了一种顺序访问集合元素的方法，而不需要暴露集合的内部表示。","head":[["meta",{"property":"og:url","content":"https://yanglixin.com/posts/program/golang/design-patterns/behavioral/Iterator.html"}],["meta",{"property":"og:title","content":"迭代器模式"}],["meta",{"property":"og:description","content":"迭代器模式（Iterator Pattern）是一种行为型设计模式，它提供了一种顺序访问集合元素的方法，而不需要暴露集合的内部表示。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-22T04:19:37.000Z"}],["meta",{"property":"article:author","content":"离心"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:tag","content":"design-patterns"}],["meta",{"property":"article:published_time","content":"2023-10-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-22T04:19:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"迭代器模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-23T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-22T04:19:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"离心\\"}]}"]]},"headers":[{"level":2,"title":"用法","slug":"用法","link":"#用法","children":[]},{"level":2,"title":"优点","slug":"优点","link":"#优点","children":[]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1697948377000,"updatedTime":1697948377000,"contributors":[{"name":"lixin","email":"lixin@lixins-MacBook-Pro.local","commits":1}]},"readingTime":{"minutes":4.5,"words":1350},"filePathRelative":"posts/program/golang/design-patterns/behavioral/Iterator.md","localizedDate":"2023年10月23日","excerpt":"<p>迭代器模式（Iterator Pattern）是一种行为型设计模式，它提供了一种顺序访问集合元素的方法，而不需要暴露集合的内部表示。</p>\\n","autoDesc":true}');export{t as data};
