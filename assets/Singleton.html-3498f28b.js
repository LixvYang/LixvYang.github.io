const e=JSON.parse('{"key":"v-719e688a","path":"/posts/program/golang/design-patterns/behavioral/Singleton.html","title":"单例模式","lang":"zh-CN","frontmatter":{"icon":"carbon:character-patterns","date":"2023-10-09T00:00:00.000Z","isOriginal":true,"category":["tutorial"],"tag":["golang","design-patterns"],"description":"单例模式是一种常用的设计模式，它确保类只能创建一个实例，并提供全局访问点。本文将介绍单例模式在Go语言中的定义、用处、实现方式以及相关的优缺点。","head":[["meta",{"property":"og:url","content":"https://yanglixin.com/posts/program/golang/design-patterns/behavioral/Singleton.html"}],["meta",{"property":"og:title","content":"单例模式"}],["meta",{"property":"og:description","content":"单例模式是一种常用的设计模式，它确保类只能创建一个实例，并提供全局访问点。本文将介绍单例模式在Go语言中的定义、用处、实现方式以及相关的优缺点。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-10T01:35:49.000Z"}],["meta",{"property":"article:author","content":"离心"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:tag","content":"design-patterns"}],["meta",{"property":"article:published_time","content":"2023-10-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-10T01:35:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"单例模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-09T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-10T01:35:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"离心\\"}]}"]]},"headers":[{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":2,"title":"用处","slug":"用处","link":"#用处","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]},{"level":2,"title":"饿汉式","slug":"饿汉式","link":"#饿汉式","children":[]},{"level":2,"title":"懒汉式","slug":"懒汉式","link":"#懒汉式","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1696901749000,"updatedTime":1696901749000,"contributors":[{"name":"lixin","email":"lixin@lixins-MacBook-Pro.local","commits":1}]},"readingTime":{"minutes":2.45,"words":736},"filePathRelative":"posts/program/golang/design-patterns/behavioral/Singleton.md","localizedDate":"2023年10月9日","excerpt":"<p>单例模式是一种常用的设计模式，它确保类只能创建一个实例，并提供全局访问点。本文将介绍单例模式在Go语言中的定义、用处、实现方式以及相关的优缺点。</p>\\n","autoDesc":true}');export{e as data};
