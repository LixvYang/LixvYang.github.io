import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as i,f as r,b as t,e as l}from"./app-8a271012.js";const d={},h=t("p",null,"模板方法模式是一种行为型设计模式，它定义了一个算法的骨架，将一些步骤延迟到子类中实现。模板方法模式可以让子类在不改变算法结构的情况下，重新定义算法的某些步骤。",-1),o=l('<h1 id="模版模式" tabindex="-1"><a class="header-anchor" href="#模版模式" aria-hidden="true">#</a> 模版模式</h1><h2 id="用法" tabindex="-1"><a class="header-anchor" href="#用法" aria-hidden="true">#</a> 用法</h2><ul><li>当一个算法有多个变化点，而且这些变化点可以分离为不同的子类时，可以使用模板方法模式。</li><li>当一个算法需要遵循一定的规范，但是具体的实现细节可以由子类自由选择时，可以使用模板方法模式。</li><li>当一个类想要让子类扩展其某些方法，但是又不想让子类修改其算法的结构和顺序时，可以使用模板方法模式。</li></ul><p>模板方法模式的优点有以下几种：</p><ul><li>模板方法模式可以实现算法和子类的解耦，提高了代码的可维护性和可扩展性。</li><li>模板方法模式可以实现算法的复用和控制，增加了代码的稳定性和安全性。</li><li>模板方法模式可以实现父类和子类之间的协作，实现了反向控制和好莱坞原则。</li></ul><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>',7);function c(n,s){return a(),i("div",null,[h,r(" more "),o])}const f=e(d,[["render",c],["__file","TemplateMethod.html.vue"]]);export{f as default};
