const n=JSON.parse(`{"key":"v-7eae6995","path":"/posts/program/golang/%E5%B8%B8%E7%94%A8%E6%A1%86%E6%9E%B6%E5%B7%A5%E5%85%B7/gin/gin-framework-principle.html","title":"Gin 框架深度剖析","lang":"zh-CN","frontmatter":{"icon":"network","date":"2021-12-19T00:00:00.000Z","isOriginal":true,"category":["tutorial"],"tag":["golang","gin"],"description":"Gin 框架深度剖析 Gin框架是一款高性能的Go Web框架,本文以一个小案例为例,从源码角度分析Gin的启动过程,请求与相应的技术原理. 我们怎么开始Gin呢?很简单,以下代码就可以开始开启Gin的Web服务了 func main() { \\t// init gin with default configs \\tr := gin.Default() r.GET('/hello', func(c *gin.Context) { c.JSON(http.StatusOK, \\"Hello\\") }) \\t// run the engine \\tr.Run() }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/program/golang/%E5%B8%B8%E7%94%A8%E6%A1%86%E6%9E%B6%E5%B7%A5%E5%85%B7/gin/gin-framework-principle.html"}],["meta",{"property":"og:title","content":"Gin 框架深度剖析"}],["meta",{"property":"og:description","content":"Gin 框架深度剖析 Gin框架是一款高性能的Go Web框架,本文以一个小案例为例,从源码角度分析Gin的启动过程,请求与相应的技术原理. 我们怎么开始Gin呢?很简单,以下代码就可以开始开启Gin的Web服务了 func main() { \\t// init gin with default configs \\tr := gin.Default() r.GET('/hello', func(c *gin.Context) { c.JSON(http.StatusOK, \\"Hello\\") }) \\t// run the engine \\tr.Run() }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-11T09:50:50.000Z"}],["meta",{"property":"article:author","content":"离心"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:tag","content":"gin"}],["meta",{"property":"article:published_time","content":"2021-12-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-11T09:50:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Gin 框架深度剖析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-12-19T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-11T09:50:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"离心\\"}]}"]]},"headers":[{"level":3,"title":"gin的Default函数","slug":"gin的default函数","link":"#gin的default函数","children":[]},{"level":3,"title":"Engine.Use函数","slug":"engine-use函数","link":"#engine-use函数","children":[]},{"level":2,"title":"注册事件处理","slug":"注册事件处理","link":"#注册事件处理","children":[]},{"level":2,"title":"启动 r.Run","slug":"启动-r-run","link":"#启动-r-run","children":[]},{"level":2,"title":"http.ListenAndServe方法","slug":"http-listenandserve方法","link":"#http-listenandserve方法","children":[]},{"level":2,"title":"中间件与handler","slug":"中间件与handler","link":"#中间件与handler","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1693711577000,"updatedTime":1694425850000,"contributors":[{"name":"lixin","email":"lixin@lixins-MacBook-Pro.local","commits":2}]},"readingTime":{"minutes":12.51,"words":3752},"filePathRelative":"posts/program/golang/常用框架工具/gin/gin-framework-principle.md","localizedDate":"2021年12月19日","excerpt":"<h1> Gin 框架深度剖析</h1>\\n<p>Gin框架是一款高性能的Go Web框架,本文以一个小案例为例,从源码角度分析Gin的启动过程,请求与相应的技术原理.</p>\\n<p>我们怎么开始Gin呢?很简单,以下代码就可以开始开启Gin的Web服务了</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">func</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token comment\\">// init gin with default configs</span>\\n\\tr <span class=\\"token operator\\">:=</span> gin<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Default</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n  r<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GET</span><span class=\\"token punctuation\\">(</span><span class=\\"token char\\">'/hello'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">func</span><span class=\\"token punctuation\\">(</span>c <span class=\\"token operator\\">*</span>gin<span class=\\"token punctuation\\">.</span>Context<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    c<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">JSON</span><span class=\\"token punctuation\\">(</span>http<span class=\\"token punctuation\\">.</span>StatusOK<span class=\\"token punctuation\\">,</span>   <span class=\\"token string\\">\\"Hello\\"</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n\\t<span class=\\"token comment\\">// run the engine</span>\\n\\tr<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Run</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
