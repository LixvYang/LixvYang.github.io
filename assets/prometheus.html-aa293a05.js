import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c as r,f as c,b as a,d as n,a as e,e as t}from"./app-24531637.js";const l="/assets/images/program/prometheus/pushgateway-data.png",u="/assets/images/program/prometheus/node-exporter-data.png",d="/assets/images/program/prometheus/prometheus-node-data.png",m="/assets/images/program/prometheus/grafana-1.png",h="/assets/images/program/prometheus/grafana-2.png",k="/assets/images/program/prometheus/grafana-3.png",g="/assets/images/program/prometheus/gin-prometheus-data-1.png",v="/assets/images/program/prometheus/gin-prometheus-data-2.png",b={},_=a("p",null,"最近在公司做监控方面的工作，接触到了Prometheus、Grafana等云服务产品，特地在此记录下来学习到的知识和使用过程",-1),f=t(`<h1 id="万字长文带你入门-prometheus" tabindex="-1"><a class="header-anchor" href="#万字长文带你入门-prometheus" aria-hidden="true">#</a> 万字长文带你入门 Prometheus</h1><p>本文首先会简单介绍一下Prometheus是啥，然后会用Go语言写一些程序上报一些接口数据到Prometheus上，接着通过Grafana展示出来，也算简单了解下云原生的知识了。</p><p>本文所用到的所有的库/组件会通过Docker来启动，没用Docker也不用害怕，只是个工具入门就可以了，我们本文用到的也只是最简单的部分。</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>我们先来简单解释一下啥是Prometheus以及它是怎么来的。</p><p>我们知道K8s是由Google的Brog系统演变而来的，Prometheus就是受Brog的监控系统Brogmon启发而来。由前Google的工程师开发，2012年创建、2017年发布Prometheus2.0。</p><p>Prometheus是新一代云原生监控系统，社区非常活跃，目前已经有超过650位贡献者并且有超过120+第三方集成(K8s、Etcd、Consul、MySQL等等)，目标是达成针对长期趋势分析、告警、数据可视化的目的。</p><p>优势：</p><p>已于管理，核心只有一个二进制文件，不存在任何第三方依赖。唯一需要的就是本地磁盘，不会有潜在级联故障的风险。Prometheus是一个时序数据库，基于Pull模型的架构方式，可以在任何地方(本地电脑、开发环境、测试环境)搭建我们的监控系统。对于一些复杂情况，还可以使用Prometheus服务发现(Service Discovery)的能力动态管理监控目标。</p><p>数据可以通过Pull的方式获取(例如可以在你的服务下开放一个提供数据端口供Prometheus不断拉取获得)，也可以通过Prometheus提供的<code>Pushgateway</code>由我们的应用程序提供推送数据到Pushgateway，接着Pushgateway再推送到Prometheus获得。</p><p>采集到的数据指标(metric)保存在内置的时间序列数据库中(TSDB)，所有的样本出了基本的指标名称之外，还包含描述样本的标签<code>label</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>http_request_status<span class="token punctuation">{</span>code<span class="token operator">=</span><span class="token string">&#39;200&#39;</span>,content_path<span class="token operator">=</span><span class="token string">&#39;/api/path&#39;</span>, <span class="token assign-left variable">environment</span><span class="token operator">=</span><span class="token string">&#39;produment&#39;</span><span class="token punctuation">}</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>value1@timestamp1,value2@timestamp2<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
http_request_status<span class="token punctuation">{</span>code<span class="token operator">=</span><span class="token string">&#39;200&#39;</span>,content_path<span class="token operator">=</span><span class="token string">&#39;/api/path2&#39;</span>, <span class="token assign-left variable">environment</span><span class="token operator">=</span><span class="token string">&#39;produment&#39;</span><span class="token punctuation">}</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>value1@timestamp1,value2@timestamp2<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>每一条时间序列都是由指标名称(Metrics Name)和一系列标签(Labels)组成，每条时间序列按照时间的先后顺序存储一系列的样本值。标签的维度可能来源于我们需要监控的对象，比如我们需要监控某个接口的错误码，那么我们就可以用这样的标签<code>code=&#39;1001&#39;,&#39;endpoint&#39;=&#39;/api/hello&#39;</code>。</p><p>内置了强大的PromQL语言可以实现对采集指标的查询、聚合，同时也可以应用到数据可视化(Grafana)以及告警中，通过PromQL可以回答以下问题:</p><ul><li>在过去一段时间中95%应用延迟时间的分布范围？</li><li>预测在4小时后，磁盘空间占用大致会是什么情况？</li><li>CPU占用率前5位的服务有哪些？(过滤)</li></ul><h3 id="环境准备" tabindex="-1"><a class="header-anchor" href="#环境准备" aria-hidden="true">#</a> 环境准备</h3><h4 id="prometheus-server" tabindex="-1"><a class="header-anchor" href="#prometheus-server" aria-hidden="true">#</a> Prometheus Server</h4><p>Prometheus 其实就是我们上述所说的最简单的二进制文件，但我们选择通过Docker来启动,首先我们需要准备我们的prometheus.yaml配置文件，放到<code>~/data/prometheus/prometheus.yaml</code>:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># my global config</span>
<span class="token key atrule">global</span><span class="token punctuation">:</span>
  <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span> 15s <span class="token comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span>
  <span class="token key atrule">evaluation_interval</span><span class="token punctuation">:</span> 15s <span class="token comment"># Evaluate rules every 15 seconds. The default is every 1 minute.</span>
  <span class="token comment"># scrape_timeout is set to the global default (10s).</span>

<span class="token comment"># Alertmanager configuration</span>
<span class="token key atrule">alerting</span><span class="token punctuation">:</span>
  <span class="token key atrule">alertmanagers</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span>
          <span class="token comment"># - alertmanager:9093</span>

<span class="token comment"># A scrape configuration containing exactly one endpoint to scrape:</span>
<span class="token comment"># Here it&#39;s Prometheus itself.</span>
<span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">&#39;pushgateway&#39;</span>
    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;host.docker.internal:9092&#39;</span><span class="token punctuation">]</span>
        <span class="token key atrule">labels</span><span class="token punctuation">:</span>
          <span class="token key atrule">instance</span><span class="token punctuation">:</span> pushgateway
  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">&#39;node&#39;</span>
    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;host.docker.internal:9100&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们只需要了解<code>global</code>和<code>scrape_configs</code>配置，global是全局配置，例如:</p><ul><li><code>global</code>下配置 <code>scrape_interval: 15s</code>，意思是抓取间隔是15s一次</li><li><code>scrape_configs</code>下的配置是具体的抓取数据的任务，<code>job_name: 名称</code>,<code>targets: 抓取目标地址</code></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>由于我们的Prometheus程序是通过Docker启动的，所以想访问我们我们的job<code>pushgateway</code>和<code>node</code>本机的端口程序需要通过<code>host.docker.internal</code>...意思是我们的pushgateway和node俩任务的数据源不是通过Docker启动的，而是通过我本机来启动的</p></div><p>将这个文件放入<code>~/data/prometheus/prometheus.yaml</code>就可以了(你可以随便放，只要Docker启动prometheus的时候路径对得上就OK)，接着我们就通过Docker启动Prometheus:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-p</span> <span class="token number">9090</span>:9090 <span class="token punctuation">\\</span>
    <span class="token parameter variable">-v</span> /Users/<span class="token variable">$YOURHOME</span>/data/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml <span class="token punctuation">\\</span>
    prom/prometheus <span class="token punctuation">\\</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没问题，打开<code>localhost:9090</code>就可以看到界面了</p><h4 id="pushgateway" tabindex="-1"><a class="header-anchor" href="#pushgateway" aria-hidden="true">#</a> Pushgateway</h4><p>当我们想采集我们的应用程序的数据时直接上报Prometheus是不可以的，但是我们应用程序的数据可以上报给Pushgateway，然后Prometheus可以从Pushgateway抓取数据，四舍五入等于我们的应用程序上报数据到Prometheus了.......😦</p><p>这里需要区分主机</p><p>我们从本机(MacOS Arm64)来启动Pushgateway:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> https://github.com/prometheus/pushgateway/releases/download/v1.6.2/pushgateway-1.6.2.darwin-arm64.tar.gz
<span class="token function">tar</span> xzvf pushgateway-1.6.2.darwin-arm64.tar.gz
<span class="token function">mv</span> pushgateway-1.6.2.darwin-arm64 /usr/local/pushgateway
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着启动:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pushgateway --web.listen-address <span class="token number">0.0</span>.0.0:9092
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不出意外打开<code>localhost:9092</code>就可以看到对应数据了</p><figure><img src="`+l+`" alt="pushgateway-data.png" tabindex="0" loading="lazy"><figcaption>pushgateway-data.png</figcaption></figure><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>当然，你也可以通过Docker来启动<code>Pushgateway</code>,但是需要重新写之前的Prometheus配置文件和启动Prometheus Server了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull prom/pushgateway
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">9091</span>:9091 prom/pushgateway
<span class="token comment"># 收集指标地址需要从 host.docker.internal:9092 改成 172.30.12.167:9092</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h4 id="node-exporter" tabindex="-1"><a class="header-anchor" href="#node-exporter" aria-hidden="true">#</a> Node Exporter</h4><p>在Prometheus的架构设计中，Prometheus Server并不直接服务监控特定的目标，其主要任务负责数据的收集，存储并且对外提供数据查询支持。</p><p>因此为了能够能够监控到某些东西，如主机的CPU使用率，我们需要使用到Exporter。Prometheus周期性的从Exporter暴露的HTTP服务地址（通常是/metrics）拉取监控样本数据。</p><p>从上面的描述中可以看出Exporter可以是一个相对开放的概念，其可以是一个独立运行的程序独立于监控目标以外，也可以是直接内置在监控目标中。只要能够向Prometheus提供标准格式的监控样本数据即可。</p>`,39),y={href:"https://github.com/prometheus/node_exporter",target:"_blank",rel:"noopener noreferrer"},x={href:"https://prometheus.io/download/%E8%8E%B7%E5%8F%96%E6%9C%80%E6%96%B0%E7%9A%84node",target:"_blank",rel:"noopener noreferrer"},P=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.darwin-amd64.tar.gz
<span class="token function">tar</span> <span class="token parameter variable">-xzf</span> node_exporter-1.6.1.darwin-amd64.tar.gz

<span class="token builtin class-name">cd</span> node_exporter-1.6.1.darwin-amd64
<span class="token function">cp</span> node_exporter-1.6.1.darwin-amd64/node_exporter /usr/local/bin/
./node_exporter
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动成功后，可以看到以下输出：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>INFO<span class="token punctuation">[</span>0000<span class="token punctuation">]</span> Listening on :9100        <span class="token assign-left variable">source</span><span class="token operator">=</span><span class="token string">&quot;node_exporter.go:76&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>打开<code>http://localhost:9100/metrics</code>,可以看到当前node exporter获取到的当前主机的所有监控数据，如下所示：</p><figure><img src="`+u+`" alt="node-exporter-data.png" tabindex="0" loading="lazy"><figcaption>node-exporter-data.png</figcaption></figure><p>你会发现每一个监控指标之前都会有一段类似于如下形式的信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># HELP node_cpu Seconds the cpus spent in each mode.</span>
<span class="token comment"># TYPE node_cpu counter</span>
node_cpu<span class="token punctuation">{</span>cpu<span class="token operator">=</span><span class="token string">&quot;cpu0&quot;</span>,mode<span class="token operator">=</span><span class="token string">&quot;idle&quot;</span><span class="token punctuation">}</span> <span class="token number">375209.421875</span>
<span class="token comment"># HELP node_load1 1m load average.</span>
<span class="token comment"># TYPE node_load1 gauge</span>
node_load1 <span class="token number">3.0703125</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中HELP用于解释当前指标的含义，TYPE则说明当前指标的数据类型。</p><p>在上面的例子中node_cpu的注释表明当前指标是cpu0上idle进程占用CPU的总时间，CPU占用时间是一个只增不减的度量指标，从类型中也可以看出node_cpu的数据类型是计数器(counter)，与该指标的实际含义一致。</p><p>又例如node_load1该指标反映了当前主机在最近一分钟以内的负载情况，系统的负载情况会随系统资源的使用而变化，因此node_load1反映的是当前状态，数据可能增加也可能减少，从注释中可以看出当前指标类型为仪表盘(gauge)，与指标反映的实际含义一致。</p><p>除了这些以外，在当前页面中根据物理主机系统的不同，你还可能看到如下监控指标：</p><ul><li>node_boot_time：系统启动时间</li><li>node_cpu：系统CPU使用量</li><li>nodedisk*：磁盘IO</li><li>nodefilesystem*：文件系统用量</li><li>node_load1：系统负载</li><li>nodememeory*：内存使用量</li><li>nodenetwork*：网络带宽</li><li>node_time：当前系统时间</li><li>go_*：node exporter中go相关指标</li><li>process_*：node exporter自身进程相关运行指标</li></ul><p>由于我们上面的的prometheus.yaml已经启动并且抓取了9100端口的数据，所以访问<code>localhost:9090</code>是可以找到这些数据的:</p><figure><img src="`+d+`" alt="prometheus-node-data.png" tabindex="0" loading="lazy"><figcaption>prometheus-node-data.png</figcaption></figure><h4 id="grafana" tabindex="-1"><a class="header-anchor" href="#grafana" aria-hidden="true">#</a> Grafana</h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Grafana可以在教程后面需要时再开启</p></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">3000</span>:3000 <span class="token parameter variable">--name</span><span class="token operator">=</span>grafana grafana/grafana-enterprise
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>访问http://localhost:3000就可以进入到Grafana的界面中，默认情况下使用账户账号:admin、密码:admin进行登录。</p><p>在Grafana首页中显示默认的使用向导，包括：安装、添加数据源、创建Dashboard、邀请成员、以及安装应用和插件等主要流程:</p><figure><img src="`+m+'" alt="grafana-1.png" tabindex="0" loading="lazy"><figcaption>grafana-1.png</figcaption></figure><p>导入 Prometheus 的数据源，注意地址为: <code>http://host.docker.internal:9090</code>:</p><figure><img src="'+h+`" alt="grafana-2.png" tabindex="0" loading="lazy"><figcaption>grafana-2.png</figcaption></figure><p>然后就可以启动并且保存指标了:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>avg without<span class="token punctuation">(</span>cpu<span class="token punctuation">)</span> <span class="token punctuation">(</span>rate<span class="token punctuation">(</span>node_cpu<span class="token punctuation">[</span>2m<span class="token punctuation">]</span><span class="token punctuation">))</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+k+`" alt="grafana-3.png" tabindex="0" loading="lazy"><figcaption>grafana-3.png</figcaption></figure><hr><p>下面我们来了解一下Promethes的四种数据类型</p><h3 id="四种数据类型" tabindex="-1"><a class="header-anchor" href="#四种数据类型" aria-hidden="true">#</a> 四种数据类型</h3><p>Prometheus的数据类型有四种:</p><ol><li>Counter：只增不减的计数器</li><li>Gauge：可增可减的仪表盘</li><li>Histogram 数据分布情况</li><li>Summary 数据分布情况</li></ol><h4 id="counter-只增不减的计数器" tabindex="-1"><a class="header-anchor" href="#counter-只增不减的计数器" aria-hidden="true">#</a> Counter：只增不减的计数器</h4><p>Counter只增不减，除非系统发生重制。常见的监控指标有:http请求总数(统计QPS)，cpu使用率，都是Counter类型的监控指标，<mark>一般定义Counter类型指标时推荐使用_total作为后缀</mark></p><p>例如通过rate函数获取HTTP请求量的增长率:</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>rate(http_requests_total[5m])</p><p>PromQL中直接内置了rate(v range-vector)函数，rate函数可以直接计算区间向量v在时间窗口内平均增长速率。<br> 换句话说上面的PromQL可以替换成 increase(http_request_total[5m]) / 300也就是在5分钟的总请求次数/300秒</p></div><p>查询当前系统中，访问量前10的HTTP地址：</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>topk(10, http_requests_total)</p></div><h4 id="gauge-可增可减的仪表盘" tabindex="-1"><a class="header-anchor" href="#gauge-可增可减的仪表盘" aria-hidden="true">#</a> Gauge：可增可减的仪表盘</h4><p>与Counter不同，Gauge类型的指标侧重于反应系统的当前状态。因此这类指标的样本数据可增可减。常见指标如：node_memory_MemFree（主机当前空闲的内容大小）、node_memory_MemAvailable（可用内存大小）都是Gauge类型的监控指标。</p><p>通过Gauge指标，用户可以直接查看系统的当前状态：</p><p>node_memory_MemFree</p><p>对于Gauge类型的监控指标，通过PromQL内置函数delta()可以获取样本在一段时间返回内的变化情况。例如，计算CPU温度在两个小时内的差异：</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>delta(cpu_temp_celsius{host=&quot;zeus&quot;}[2h])</p></div><p>还可以使用deriv()计算样本的线性回归模型，甚至是直接使用predict_linear()对数据的变化趋势进行预测。例如，预测系统磁盘空间在4个小时之后的剩余情况：</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>predict_linear(node_filesystem_free{job=&quot;node&quot;}[1h], 4 * 3600)</p></div><h4 id="使用histogram和summary分析数据分布情况" tabindex="-1"><a class="header-anchor" href="#使用histogram和summary分析数据分布情况" aria-hidden="true">#</a> 使用Histogram和Summary分析数据分布情况</h4><p>大多数情况下我们通常倾向于某些量化指标的平均值，比如CPU平均值，页面平均响应时间。但这样的平均值弊端也很明显，例如一个接口的响应时间大多数情况下都在100毫秒以内，但就是有个别请求需要10s，这回导致某些接口的响应时间远远超过平均数，这种现象叫做肥尾效应。</p><p>为了区分是平均的慢还是肥尾的慢，最简单的方式就是按照请求延迟的范围进行分组。</p><p>例如，统计延迟在0<sub>10ms之间的请求数有多少而10</sub>20ms之间的请求数又有多少。</p><p>通过这种方式可以快速分析系统慢的原因。Histogram和Summary都是为了能够解决这样问题的存在，通过Histogram和Summary类型的监控指标，我们可以快速了解监控样本的分布情况。</p><p>例如，指标prometheus_tsdb_wal_fsync_duration_seconds的指标类型为Summary。 它记录了Prometheus Server中wal_fsync处理的处理时间，通过访问Prometheus Server的/metrics地址，可以获取到以下监控样本数据：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># HELP prometheus_tsdb_wal_fsync_duration_seconds Duration of WAL fsync.</span>
<span class="token comment"># TYPE prometheus_tsdb_wal_fsync_duration_seconds summary</span>
prometheus_tsdb_wal_fsync_duration_seconds<span class="token punctuation">{</span>quantile<span class="token operator">=</span><span class="token string">&quot;0.5&quot;</span><span class="token punctuation">}</span> <span class="token number">0.012352463</span>
prometheus_tsdb_wal_fsync_duration_seconds<span class="token punctuation">{</span>quantile<span class="token operator">=</span><span class="token string">&quot;0.9&quot;</span><span class="token punctuation">}</span> <span class="token number">0.014458005</span>
prometheus_tsdb_wal_fsync_duration_seconds<span class="token punctuation">{</span>quantile<span class="token operator">=</span><span class="token string">&quot;0.99&quot;</span><span class="token punctuation">}</span> <span class="token number">0.017316173</span>
prometheus_tsdb_wal_fsync_duration_seconds_sum <span class="token number">2.888716127000002</span>
prometheus_tsdb_wal_fsync_duration_seconds_count <span class="token number">216</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的样本中可以得知当前Prometheus Server进行wal_fsync操作的总次数为216次，耗时2.888716127000002s。其中中位数（quantile=0.5）的耗时为0.012352463，9分位数（quantile=0.9）的耗时为0.014458005s。</p><p>在Prometheus Server自身返回的样本数据中，我们还能找到类型为Histogram的监控指标prometheus_tsdb_compaction_chunk_range_bucket。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># HELP prometheus_tsdb_compaction_chunk_range Final time range of chunks on their first compaction</span>
<span class="token comment"># TYPE prometheus_tsdb_compaction_chunk_range histogram</span>
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">&quot;100&quot;</span><span class="token punctuation">}</span> <span class="token number">0</span>
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">&quot;400&quot;</span><span class="token punctuation">}</span> <span class="token number">0</span>
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">&quot;1600&quot;</span><span class="token punctuation">}</span> <span class="token number">0</span>
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">&quot;6400&quot;</span><span class="token punctuation">}</span> <span class="token number">0</span>
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">&quot;25600&quot;</span><span class="token punctuation">}</span> <span class="token number">0</span>
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">&quot;102400&quot;</span><span class="token punctuation">}</span> <span class="token number">0</span>
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">&quot;409600&quot;</span><span class="token punctuation">}</span> <span class="token number">0</span>
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">&quot;1.6384e+06&quot;</span><span class="token punctuation">}</span> <span class="token number">260</span>
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">&quot;6.5536e+06&quot;</span><span class="token punctuation">}</span> <span class="token number">780</span>
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">&quot;2.62144e+07&quot;</span><span class="token punctuation">}</span> <span class="token number">780</span>
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">&quot;+Inf&quot;</span><span class="token punctuation">}</span> <span class="token number">780</span>
prometheus_tsdb_compaction_chunk_range_sum <span class="token number">1</span>.1540798e+09
prometheus_tsdb_compaction_chunk_range_count <span class="token number">780</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与Summary类型的指标相似之处在于Histogram类型的样本同样会反应当前指标的记录的总数(以_count作为后缀)以及其值的总量（以_sum作为后缀）。不同在于Histogram指标直接反应了在不同区间内样本的个数，区间通过标签len进行定义。</p><p>同时对于Histogram的指标，我们还可以通过histogram_quantile()函数计算出其值的分位数。不同在于Histogram通过histogram_quantile函数是在服务器端计算的分位数。 而Sumamry的分位数则是直接在客户端计算完成。</p><p>因此对于分位数的计算而言，Summary在通过PromQL进行查询时有更好的性能表现，而Histogram则会消耗更多的资源。反之对于客户端而言Histogram消耗的资源更少。在选择这两种方式时用户应该按照自己的实际场景进行选择。</p><h3 id="上报数据的方式" tabindex="-1"><a class="header-anchor" href="#上报数据的方式" aria-hidden="true">#</a> 上报数据的方式</h3><p>上报数据有两种一种是通过pull的方式，prometheus自动从配置文件的指定源去拉取数据，另一种是从我们的应用程序上报到pushgateway，然后从pushgateway推送数据:</p><h2 id="go语言监控数据上报" tabindex="-1"><a class="header-anchor" href="#go语言监控数据上报" aria-hidden="true">#</a> Go语言监控数据上报</h2><p>下面我来通过具体的go程序来演示一下:</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>具体的数据展示环节需要配置相应的环境,grafana、prometheus、pushgateway。</p></div><p>下面我通过Go语言来展示两种上报数据的类型:</p><p>首先是通过pull模式，prometheus自动从配置文件的指定源去拉取数据，我们只需要给prometheus提供源源不断的数据源:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;log&quot;</span>

	<span class="token string">&quot;github.com/gin-gonic/gin&quot;</span>
	<span class="token string">&quot;github.com/prometheus/client_golang/prometheus/promhttp&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/metrics&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		handler <span class="token operator">:=</span> promhttp<span class="token punctuation">.</span><span class="token function">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		handler<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&quot;:8081&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们上面这段程序的意思是在8081端口提供数据，然后在我们的<code>prometheus.yaml</code>配置中新增对应的配置项来pull抓取8081端口<code>/metrics</code>的数据:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> go<span class="token punctuation">-</span>gin<span class="token punctuation">-</span>test
    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;host.docker.internal:8081&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>于是你可以看到的结果是:</p><p><img src="`+g+'" alt="gin-prometheus-data-1.png" loading="lazy"><br><img src="'+v+'" alt="gin-prometheus-data-2.png" loading="lazy"></p><p>这是我们提供对应的端口，然后prometheus程序不断去拉取数据的方式。</p><p>还有另一种就是通过讲数据推送push到pushgateway,然后prometheus去pushgateway拉取数据的方式，下面我通过三个实例来分别讲解推送数据的方式，以及顺便讲解prometheus，Counter、Gauge、Histogram数据类型的常见应用。</p><h3 id="接口耗时监控" tabindex="-1"><a class="header-anchor" href="#接口耗时监控" aria-hidden="true">#</a> 接口耗时监控</h3><h3 id="接口qps监控" tabindex="-1"><a class="header-anchor" href="#接口qps监控" aria-hidden="true">#</a> 接口QPS监控</h3><h3 id="接口错误码监控" tabindex="-1"><a class="header-anchor" href="#接口错误码监控" aria-hidden="true">#</a> 接口错误码监控</h3><h2 id="grafana监控" tabindex="-1"><a class="header-anchor" href="#grafana监控" aria-hidden="true">#</a> Grafana监控</h2><h3 id="简介-1" tabindex="-1"><a class="header-anchor" href="#简介-1" aria-hidden="true">#</a> 简介</h3><h3 id="画图类型" tabindex="-1"><a class="header-anchor" href="#画图类型" aria-hidden="true">#</a> 画图类型</h3><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>参考:</p>',79),q={href:"https://yunlzheng.gitbook.io/",target:"_blank",rel:"noopener noreferrer"};function w(E,S){const s=p("ExternalLinkIcon");return i(),r("div",null,[_,c(" more "),f,a("p",null,[n("这里为了能够采集到主机的运行指标如CPU, 内存，磁盘等信息。我们可以使用"),a("a",y,[n("Node Exporter"),e(s)]),n("。")]),a("p",null,[n("Node Exporter同样采用Golang编写，并且不存在任何的第三方依赖，只需要下载，解压即可运行。可以从"),a("a",x,[n("https://prometheus.io/download/获取最新的node"),e(s)]),n(" exporter版本的二进制包。")]),P,a("p",null,[a("a",q,[n("Prometheus Book"),e(s)])])])}const C=o(b,[["render",w],["__file","prometheus.html.vue"]]);export{C as default};
