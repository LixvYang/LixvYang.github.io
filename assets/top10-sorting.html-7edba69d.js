const n=JSON.parse('{"key":"v-6e1e1211","path":"/posts/program/golang/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/top-10-sorting/top10-sorting.html","title":"十大排序","lang":"zh-CN","frontmatter":{"icon":"basil:edit-solid","date":"2021-11-23T00:00:00.000Z","isOriginal":true,"category":["tutorial"],"tag":["golang","top10-sort"],"description":"十大排序 选择排序 这是最简单也最没用的算法, 时间复杂度有O(n^2), 同时也不稳定 选择排序的思路特别简单: 第一遍找到最小的值把它放在最前面, 再遍历一次找到第二小的数放到第二个位置...... 那么我们怎么开始写这个程序呢? 首先第一步是要找到最小的那个数, 如果遍历到的arr[j]比最小位置还要小,那么就让minPosition = j, 所以 minPosition := 0 arr := []int{1, 3, 2, 4, 6, 5} for j := 0; j &lt; len(arr); j++ { if arr[j] &lt; arr[minPosition] { minPosition = j } }","head":[["meta",{"property":"og:url","content":"https://yanglixin.com/posts/program/golang/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/top-10-sorting/top10-sorting.html"}],["meta",{"property":"og:title","content":"十大排序"}],["meta",{"property":"og:description","content":"十大排序 选择排序 这是最简单也最没用的算法, 时间复杂度有O(n^2), 同时也不稳定 选择排序的思路特别简单: 第一遍找到最小的值把它放在最前面, 再遍历一次找到第二小的数放到第二个位置...... 那么我们怎么开始写这个程序呢? 首先第一步是要找到最小的那个数, 如果遍历到的arr[j]比最小位置还要小,那么就让minPosition = j, 所以 minPosition := 0 arr := []int{1, 3, 2, 4, 6, 5} for j := 0; j &lt; len(arr); j++ { if arr[j] &lt; arr[minPosition] { minPosition = j } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-02T09:43:53.000Z"}],["meta",{"property":"article:author","content":"离心"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:tag","content":"top10-sort"}],["meta",{"property":"article:published_time","content":"2021-11-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-02T09:43:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"十大排序\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-11-23T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-02T09:43:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"离心\\"}]}"]]},"headers":[{"level":3,"title":"选择排序","slug":"选择排序","link":"#选择排序","children":[]},{"level":3,"title":"冒泡排序","slug":"冒泡排序","link":"#冒泡排序","children":[]},{"level":3,"title":"插入排序","slug":"插入排序","link":"#插入排序","children":[]},{"level":3,"title":"希尔排序---- 改进的插入排序","slug":"希尔排序-改进的插入排序","link":"#希尔排序-改进的插入排序","children":[]},{"level":3,"title":"归并排序","slug":"归并排序","link":"#归并排序","children":[]},{"level":3,"title":"快速排序","slug":"快速排序","link":"#快速排序","children":[]},{"level":3,"title":"堆排序","slug":"堆排序","link":"#堆排序","children":[]}],"git":{"createdTime":1693728597000,"updatedTime":1696239833000,"contributors":[{"name":"lixin","email":"lixin@lixins-MacBook-Pro.local","commits":2}]},"readingTime":{"minutes":7.59,"words":2277},"filePathRelative":"posts/program/golang/十大排序/top-10-sorting/top10-sorting.md","localizedDate":"2021年11月23日","excerpt":"<h1> 十大排序</h1>\\n<h3> 选择排序</h3>\\n<p>这是最简单也最没用的算法, 时间复杂度有O(n^2), 同时也不稳定</p>\\n<p>选择排序的思路特别简单: 第一遍找到最小的值把它放在最前面, 再遍历一次找到第二小的数放到第二个位置......</p>\\n<p>那么我们怎么开始写这个程序呢?</p>\\n<p>首先第一步是要找到最小的那个数, 如果遍历到的arr[j]比最小位置还要小,那么就让minPosition = j, 所以</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code>minPosition <span class=\\"token operator\\">:=</span> <span class=\\"token number\\">0</span>\\narr <span class=\\"token operator\\">:=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">6</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">for</span> j <span class=\\"token operator\\">:=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> j <span class=\\"token operator\\">&lt;</span> <span class=\\"token function\\">len</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> j<span class=\\"token operator\\">++</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">if</span> arr<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span>  <span class=\\"token operator\\">&lt;</span> arr<span class=\\"token punctuation\\">[</span>minPosition<span class=\\"token punctuation\\">]</span> <span class=\\"token punctuation\\">{</span>\\n    minPosition <span class=\\"token operator\\">=</span> j\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
